name: Test Backend

on:
  push:
    branches:
      - 'DO/feat/CHU-14-DevOps-cicd'

# 실행될 잡(job) 정의
jobs:
  # 백엔드 배포 잡
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      # 1. 저장소 코드 내려받기
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐싱 설정 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/chu/**/build.gradle', 'backend/chu/**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: ./backend/chu
        run: chmod +x ./gradlew

      # 5. Gradle로 빌드 실행
      - name: Build with Gradle
        working-directory: ./backend/chu
        run: ./gradlew build -x test

      # 6. 빌드된 JAR 파일을 Docker 폴더로 복사
      - name: Prepare for Docker build
        run: cp backend/chu/build/libs/*.jar backend/chu/docker/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 7. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        working-directory: ./backend/chu/docker
        run: |
          echo "${{ secrets.DOT_ENV }}" > .env
          
          docker compose -f docker-compose.blue.yml build
          docker compose -f docker-compose.blue.yml push

      # 9. 배포 서버에 최종 배포
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/spring-chu/docker
            cd /home/ubuntu/spring-chu/docker
            
            # GitHub Secret 값을 사용해 .env 파일을 생성
            echo "${{ secrets.DOT_ENV }}" > .env
            
            # GitHub Secret으로 docker-compose.blue.yml 파일 자동 생성
            echo "${{ secrets.DOCKER_COMPOSE_BLUE }}" > docker-compose.blue.yml
            
            docker compose -f docker-compose.blue.yml pull
            docker compose -f docker-compose.blue.yml up -d
            
            # 사용하지 않는 이전 이미지 정리
            docker image prune -f
